// src/components/UploadTakeoff.jsx
import React from "react";

export default function UploadTakeoff() {
  const [file, setFile] = React.useState(null);
  const [loading, setLoading] = React.useState(false);
  const [result, setResult] = React.useState(null);
  const [error, setError] = React.useState("");

  async function handleSubmit(e) {
    e.preventDefault();
    setError("");
    setResult(null);

    if (!file) {
      setError("Please select a PDF, DWG or DXF file.");
      return;
    }

    setLoading(true);
    try {
      const form = new FormData();
      form.append("file", file);

      const res = await fetch("/api/upload", {
        method: "POST",
        body: form,
      });

      const data = await res.json();
      if (!res.ok) throw new Error(data.error || "Upload failed");
      setResult(data.analysis);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
      <h3 className="text-lg font-semibold text-slate-900">AI Take-off Demo</h3>
      <p className="mt-1 text-sm text-slate-600">
        Upload a drawing file to simulate automatic quantity extraction.
      </p>

      <form onSubmit={handleSubmit} className="mt-4 space-y-3">
        <input
          type="file"
          accept=".pdf,.dwg,.dxf"
          onChange={(e) => setFile(e.target.files?.[0] || null)}
          className="block w-full text-sm text-slate-600 file:mr-4 file:rounded-lg file:border-0 file:bg-slate-900 file:px-4 file:py-2 file:text-white hover:file:bg-slate-800"
        />
        <button
          type="submit"
          disabled={loading}
          className="inline-flex items-center justify-center rounded-xl bg-slate-900 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-slate-800 disabled:opacity-50"
        >
          {loading ? "Analyzing…" : "Analyze Drawing"}
        </button>
      </form>

      {error && <p className="mt-3 text-sm text-red-600">{error}</p>}

      {result && (
        <div className="mt-6">
          <div className="text-sm text-slate-600 mb-2">
            File:{" "}
            <span className="font-medium text-slate-800">
              {result.filename}
            </span>{" "}
            · Confidence:{" "}
            <span className="font-medium text-slate-800">
              {Math.round(result.confidence * 100)}%
            </span>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead>
                <tr className="text-left text-slate-600">
                  <th className="border-b border-slate-200 py-2 pr-4">Item</th>
                  <th className="border-b border-slate-200 py-2 pr-4">Unit</th>
                  <th className="border-b border-slate-200 py-2 pr-4">Quantity</th>
                </tr>
              </thead>
              <tbody>
                {result.items.map((row, idx) => (
                  <tr key={idx}>
                    <td className="border-b border-slate-100 py-2 pr-4">
                      {row.item}
                    </td>
                    <td className="border-b border-slate-100 py-2 pr-4">
                      {row.unit}
                    </td>
                    <td className="border-b border-slate-100 py-2 pr-4">
                      {row.qty}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
}


